name: Deploy to DigitalOcean Droplet

on:
  push:
    branches:
      - "master"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "22"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Debug Secrets
        run: |
          echo "DROPLET_IP is set: ${{ secrets.DROPLET_IP != '' }}"
          echo "DROPLET_USER is set: ${{ secrets.DROPLET_USER != '' }}"
          echo "DROPLET_PASSWORD is set: ${{ secrets.DROPLET_PASSWORD != '' }}"

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            echo "Connected to Droplet"

            # Create swap file if it doesn't exist to prevent out-of-memory issues
            if [ ! -f /swapfile ]; then
              echo "Creating swap file to prevent memory issues..."
              sudo fallocate -l 2G /swapfile
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile
              echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
              echo "Swap created and enabled."
            fi

            # Install nvm if not installed
            if [ ! -s "$HOME/.nvm/nvm.sh" ]; then
              echo "Installing nvm..."
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
              source ~/.bashrc
            fi
            source ~/.nvm/nvm.sh
            nvm install 22
            nvm use 22

            # Install pnpm globally if not installed
            if ! command -v pnpm &> /dev/null; then
              echo "Installing pnpm globally..."
              npm install -g pnpm
            fi

            # Install pm2 globally if not installed
            if ! command -v pm2 &> /dev/null; then
              echo "Installing pm2 globally..."
              npm install -g pm2
            fi

            # Create app directory if it doesn't exist
            mkdir -p ~/bridget-agent-apis
            cd ~/bridget-agent-apis

            # Write the .env file from a single GitHub secret
            echo "${{ secrets.ENV_FILE }}" > .env

            # Clone the repository directly instead of using git init
            if [ ! -d .git ]; then
              echo "Cloning repository..."
              # Remove the directory content first to avoid conflicts
              rm -rf * .[^.]*
              git clone https://github.com/$(echo "${{ github.repository }}").git .
            else
              # Update existing repository
              git fetch --all
              git reset --hard origin/master
              git pull origin master
            fi

            echo "Current branch:"
            git branch --show-current
            echo "Git status:"
            git status

            # Ensure correct Node.js version again
            source ~/.nvm/nvm.sh
            nvm use 22

            # # Install global tsup and other required tools to ensure they're available
            # echo "Installing global build tools..."
            # npm install -g tsup ts-node typescript

            # Increase Node.js memory limit
            export NODE_OPTIONS="--max-old-space-size=4096"
            echo "Set Node.js memory limit: $NODE_OPTIONS"

            # Install dependencies in smaller chunks to avoid memory issues
            echo "Installing production dependencies..."
            pnpm install --no-frozen-lockfile

            # Add node_modules/.bin to PATH
            export PATH="$PATH:$(pwd)/node_modules/.bin"
            echo "Added node_modules/.bin to PATH: $PATH"
            
            # Verify tsup is available
            which tsup || echo "tsup not found in path"
            
            # Use global tsup if local one is not available
            if ! command -v tsup &> /dev/null; then
              echo "Using global tsup for build..."
              tsup src/index.ts --format esm --dts
            else
              echo "Using local tsup for build..."
              pnpm build
            fi

            # Restart the application with PM2 using the ecosystem config
            pm2 restart ecosystem.config.cjs --update-env